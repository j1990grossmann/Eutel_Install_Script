##############################################################################
#
# Configuration file for installing EUTelescope 
#        and the required ILC Software Packages
#
# This config sets up a standalone installation
# (i.e. does not link to an existing AFS installation of ILCSoft)
# 
# You might want to change the following variables:
#
# To find ilcsoft's release-version.py with all default settings for package versions 
# (this is the version string in ilcinstall/releases/VERSION/release-versions.py)
# Set to 'auto' to search for latest version.
target_ilcinstall_version = "auto"
#
# Whether or not to create 32 bit binaries on 64bit systems:
# (32bit systems will automatically be switched to 32 bits)
force_32bit = False
#
##############################################################################


# --------- set up package versions with ilcsoft's defaults: ------------

import os, sys
import platform
from distutils.version import StrictVersion, LooseVersion

# read package versions from external file provided by ilcinstall
path_where_this_file_lives = os.path.dirname( config_file )
where_ilcinstall_lives = os.path.dirname(os.path.abspath(__file__))
versions_file = ""
if target_ilcinstall_version == "auto":
    # search for latest version in releases subdirectory
    latest = ""
    for name in os.listdir(os.path.join( where_ilcinstall_lives, "releases")):
        if os.path.isdir(os.path.join( where_ilcinstall_lives, "releases",name)):
            if latest:
                if LooseVersion(latest)<LooseVersion(name):
                    latest = name
            else:
                latest = name
    if latest:
        versions_file = os.path.join( where_ilcinstall_lives, "releases", latest,"release-versions.py" )
    else:
        print "Error: could not determine latest ILCSoft version!"
else:
    versions_file = os.path.join( where_ilcinstall_lives, "releases", target_ilcinstall_version,"release-versions.py" )

# the default versions file contructs a path using ilcsoft_afs_path[arch] 
# which fails if ilcsoft is not yet set up with this gcc version;
# therefore create fake entry here
#ilcsoft_afs_path[arch] = ""
execfile( versions_file ) # !some settings are overwritten below: install dir, versions depending on distr.
print "value for use_cpp11: ", use_cpp11

# --------- determine install dir (OVERWRITING DEFAULT) ----------------------------------------------
# should be set by the user by setting the ILCSOFT environment variable
# e.g. "export ILCSOFT=~/ilcsoft"
if not os.environ.get('ILCSOFT') is None:
    ilcsoft_install_prefix = str(os.environ.get('ILCSOFT'))
else:
    ilcsoft_install_prefix = "/opt/ilcsoft"
ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )
# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# -- overwrites setting in release-versions.py! --
ilcPath = '/cvmfs/sft.cern.ch/lcg/releases/LCG_85/'
cvmfs_flavour = str(os.environ.get('CMAKE_PREFIX_PATH')).split('/')[-1]
if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# --------- package versions and paths (distribution dependent) --------------------------
# access to platform parameters: 
# platform.dist()[0] (dist short name), platform.dist()[1] (version) platform.dist()[2] (version short name)

if platform.dist()[0] == "Ubuntu":
    CMake_path = "/usr" # link to cmake installed via package manager



# ------------------ global compiler options -----------------------------------------------

ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"
if use_cpp11:
    ilcsoft.envcmake['USE_CXX11']="ON"
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"]="ON"
if( len( Fortran_lib_path ) > 0 ):
  ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]=Fortran_lib_path

#--------- to build 32-bit mode on 64bit machines set force_32bit in the beginning of this file ---
if force_32bit or platform.machine() == "i386":
   ilcsoft.env["CXXFLAGS"]="-m32"
   ilcsoft.env["CFLAGS"]="-m32"
   ilcsoft.env["FFLAGS"]="-m32"
   ilcsoft.env["LDFLAGS"]="-m32"
   ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="ON"
#----------------------------------------------------------------

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"

#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
if Eutelescope_version == "HEAD":
    ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
else:
    ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"

ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------

#-------------------------------------------------------------------------
# prerequisites: installed versions of Java, geant4, cernlib and mysql:
#  -> modify according to your system !
#-------------------------------------------------------------------------

#  when using 'link' or 'use' please specify full path to installed package
#  or use the version installed in afs (ilcPath) 


# MySQL
if 'MySQL_path' in dir():
    ilcsoft.link( MySQL( MySQL_path ))

# Java
#if 'Java_path' in dir():
#    ilcsoft.use( Java( Java_path ))

# geant4
if 'Geant4_path' in dir():
    ilcsoft.use( Geant4 ( Geant4_path ))
    if 'G4ENV_INIT_path' in dir():
        ilcsoft.module("Geant4").env["G4ENV_INIT"] = G4ENV_INIT_path

# cernlib
if 'CERNLIB_path' in dir():
    ilcsoft.use( CERNLIB(  CERNLIB_path  ))


####################################################################

#----- core tools

ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( LCIO( LCIO_version )) 
#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='OFF'
ilcsoft.module("LCIO").envcmake['INSTALL_JAR']='OFF'

ilcsoft.install( GEAR( GEAR_version )) 
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'
ilcsoft.module("GEAR").envcmake['USE_CXX11']='ON'
ilcsoft.install( LCCD( LCCD_version ))
ilcsoft.module("LCCD").envcmake['LCCD_CONDDBMYSQL']='OFF'

ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.install( CED( CED_version ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'

# DD4hep
ilcsoft.install( DD4hep( DD4hep_version ))
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path
if( use_cpp11 ):
    ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_CXX11"] = 'ON'

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 'OFF'

ilcsoft.install( MarlinUtil( MarlinUtil_version ))

#---------test beam packages 
print 'hello'
ilcsoft.install( Eutelescope( Eutelescope_version ))
print 'i'
ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']= 'branches/v1.6-dev' #Eudaq_version
ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk' # Millepede2_version
ilcsoft.module("Eutelescope").addDependency( [ 'Geant4', 'XercesC', 'GSL', 'DD4hep', 'GBL' ] ) 
ilcsoft.module("Eutelescope").env['ALLPIX']='/atlas/sahal/Analysis/Allpix/allpix-build'
ilcsoft.module("Eutelescope").Branch["AlexBranch"]=1 

#------- external packages
ilcsoft.link( Geant4( ilcPath + "Geant4/" + Geant4_version + "/" + cvmfs_flavour ))

ilcsoft.link( FastJet( ilcPath + "fastjet/" + FastJet_version + "/" + cvmfs_flavour ))

ilcsoft.link( ROOT( ilcPath + "ROOT/" + ROOT_version + "/" + cvmfs_flavour ))

ilcsoft.link( CLHEP( ilcPath + "clhep/" + CLHEP_version + "/" + cvmfs_flavour ))

ilcsoft.link( GSL( ilcPath + "GSL/" + GSL_version + "/" + cvmfs_flavour ))

ilcsoft.link( QT( ilcPath + "qt/" + QT_version + "/" + cvmfs_flavour ))

ilcsoft.link( XercesC( ilcPath + "XercesC/" + XercesC_version + "/" + cvmfs_flavour ))

#-------------------------------------------------------------------


# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version + "/" + cvmfs_flavour ))

# use pe-installed boost
if 'Boost_path' in dir():
   ilcsoft.use( Boost( Boost_path ) )



# end of configuration file

